" This vimrc automatically installs everything it needs.
" To install, or reinstall, remove ~/.vim directory and open Vim.

set nocompatible
filetype off

let needsToInstallBundles=0
if !isdirectory(expand("~/.vim/bundle/vundle"))
  echo "\nInstalling Vim dependencies... Please be patient!\n"
  silent !mkdir -p ~/.vim/tmp
  silent !mkdir -p ~/.vim/swap
  silent !mkdir -p ~/.vim/undo
  silent !mkdir -p ~/.vim/bundle
  silent !mkfifo ~/.vim/commands-fifo
  silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
  let needsToInstallBundles=1
endif

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Do these first, because other plugins depend on them
Bundle 'gmarik/vundle'
Bundle 'Syntastic'
Bundle 'tpope/vim-fugitive'
Bundle 'kien/ctrlp.vim'
Bundle 'neoclide/coc.nvim', { 'branch': 'release' }
" Bundle 'mileszs/ack.vim'

" Colorschemes
Bundle 'wgibbs/vim-irblack'
Bundle 'vim-scripts/tir_black'

" Syntax & Language Support
Bundle 'othree/html5-syntax.vim'
Bundle 'hail2u/vim-css3-syntax'
" Bundle 'kchmck/vim-coffee-script'

" Ruby / Rails
Bundle 'vim-ruby/vim-ruby'
Bundle 'tpope/vim-rails'
" Bundle 'tpope/vim-cucumber'
" Bundle 'tpope/vim-haml'
" Bundle 'slim-template/vim-slim'
Bundle 'thoughtbot/vim-rspec'

" Elixir
" Bundle 'elixir-lang/vim-elixir'

" Haskell
" Bundle 'neovimhaskell/haskell-vim'

" Javascript
Bundle 'isRuslan/vim-es6'
Bundle 'pangloss/vim-javascript'
Bundle 'mxw/vim-jsx'
Bundle 'maxmellon/vim-jsx-pretty'
Bundle 'curist/vim-angular-template'
" Bundle 'othree/yajs.vim'
" Bundle 'othree/javascript-libraries-syntax.vim'
" Bundle 'othree/es.next.syntax.vim'

" Pug Templating Enging
Bundle 'digitaltoad/vim-pug'
Bundle 'iloginow/vim-stylus'

" Other syntax
Bundle 'tpope/vim-markdown'

" Other
Bundle 'csexton/trailertrash.vim'
" Bundle 'edsono/vim-matchit'
Bundle 'godlygeek/tabular'
Bundle 'tomtom/tcomment_vim'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-sensible'
Bundle 'tpope/vim-surround'
" Bundle 'SirVer/ultisnips'

Bundle 'Lokaltog/vim-powerline'

if needsToInstallBundles == 1
  echo "\nInstalling Bundles, please ignore key map error messages\n"
  :BundleInstall!
  echo "\nInstalled.\n"
endif

filetype plugin indent on

" =========================
" NEOVIM
" =========================
let g:python3_host_prog = '/usr/local/bin/python3' " Let NeoVim make use of Python 3 (instead of Python 2)

" ==========================
" SETTINGS
" ==========================

if has("gui_macvim")
  set antialias                      " Pretty
  set guioptions=Ace                 " No menubar, toolbar or scrollbars, as minimal as possible
  set guifont=Dejavu\ Sans\ Mono:h18 " Get Dejavu Sans mono here: http://dejavu-fonts.org/
  colorscheme ir_black               " Pastel colors
  set fuoptions=maxvert,maxhorz      " Fixes Full Screen on OSX
  " If you are on OSX Lion, and you hate Lion's native full screen, turn it off for macvim:
  "   defaults write org.vim.MacVim MMNativeFullScreen 0
  " Press Ctrl+Cmd+F to go full screen
else
  colorscheme tir_black " Use Terminal version of ir_black
end

set vb t_vb=               " Turn off beep
set lazyredraw             " Don't redraw during macro execution
set synmaxcol=2048         " Stop syntax highlighting for long lines
set relativenumber         " Relative line numbering
set number                 " Absolute line number on the current line
set nowrap                 " No wrapping by default
set scrolloff=4            " Keep a few lines above and below current line
set equalalways            " create equally sized splits
set splitbelow splitright  " split placement
set wildmode=longest,list  " Makes completion in command mode like bash
set history=10000          " Keep a lot of stuff in history
set backup                 " Make backups
set backupdir=~/.vim/tmp/  " Keep backups in a central location
set directory=~/.vim/swap/ " Keep swap files in a central location
set undofile               " Keep undo history even after closing Vim
set undodir=~/.vim/undo    " Where to store undo history
set timeoutlen=500         " Don't wait so long for ambiguous leader keys
set gdefault               " assume the /g flag on :s substitutions to replace all matches in a line
set textwidth=120          " Set textwidth
set colorcolumn=+1         " Set the column after the textwidth as colored
set autoread               " Automatically reload files changed outside of vim

" Vi / Vim only settings
if !has('nvim')
  " The noesckeys option has been removed in NeoVim, so it's only applicable in Vim
  set noesckeys              " Get rid of the delay when hitting esc!
endif

" NeoVim only settings
if has('nvim')
endif

" Indenting always 2 spaces, sorry Python
set cindent
set expandtab
set shiftwidth=2
set smartindent
set softtabstop=2
set tabstop=2

" Search
set smartcase
set hlsearch

let ruby_no_expensive = 1 " Differentiate between do..end and class..end is slow
let ruby_operators = 1    " Highlight Ruby operators

" Hide DS_store, .git and current and previous directory indicators
" Use - to go up one dir
let g:netrw_list_hide= "\.DS_Store,\.git/,^\\\./,^\\\.\\\./"
let g:netrw_banner     = 0
let g:netrw_localrmdir='rm -r'
let g:netrw_bufsettings = 'noma nomod nu nobl nowrap ro'

let g:Powerline_symbols = 'fancy' " Use fancy symbols in vim-powerline

" set formatprg=par\ -w80\ -q


" Rust formatting on save
" let g:rustfmt_autosave = 1

" Issue in rust-vim: https://github.com/rust-lang/rust.vim/issues/113
" let g:syntastic_quiet_messages = {"regex": 'is unstable and should only be used on the nightly compiler, but it is currently accepted for backwards compatibility; this will soon change, see issue #31847 for more details'}

" ==========================
" AUTOCOMMANDS
" ==========================

" When editing a file, always jump to the last known cursor position.
autocmd BufReadPost *
      \ if line("'\"") > 1 && line("'\"") <= line("$") |
      \   exe "normal! g`\"" |
      \ endif

" Format xml files
au FileType xml exe ":silent 1,$!xmllint --format --recover - 2>/dev/null"
au BufRead,BufNewFile *.hamlc set ft=haml




" ==========================
" GENERAL KEY MAPPINGS
" ==========================

command! W :w           " Rename :W to :w
command! Wq :wq         " Rename :Wq to :w
command! Q :q           " Rename :Q to :q
command! WQ :wq         " Rename :WQ to :wq

" command! Ex :Explore    " Rename :Ex to :Explore

" Use OSX pbpaste/pbcopy for F1/F2, for use in terminal
nmap <F1> :set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
imap <F1> <Esc>:set paste<cr>:r !pbpaste<cr>:set nopaste<cr>
nmap <F2> :.w !pbcopy<cr><cr>
vmap <F2> :w !pbcopy<cr><cr>

" Directly switch between open splitted windows
map <C-J> <C-W>j
map <C-H> <C-W>h
map <C-L> <C-W>l
map <C-K> <C-W>k

" pressing j or k in a long wrapped will put cursor down/up one visual line
nnoremap j gj
nnoremap k gk

" Shift+K becomes similar to Shift+J
nnoremap <S-k> kJ

" Remap return to clear search highlight
nnoremap <cr> :nohlsearch<cr>

" In normal mode, space will start command mode.
nnoremap <space> :

" Buffer Explorer opens with Ctrl+B
nnoremap <C-B> :BufExplorer<cr>

" %% will become the directory of the current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" Hooks up smart tab autocomplete behavior mentioned above
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" Aligns tables in Cucumber
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>AlignCucumberTables()<cr>a

" A common typo is ":E" when actually meaning ":e" and not ":Explore" or
" ":Errors".
cnoreabbrev E e

" ==========================
" LEADER KEYS
" ==========================

let mapleader = ","

" Map ,e and ,v to open files in the same directory as the current file
map <leader>e :edit %%
map <leader>v :view %%
map <leader>m :vsplit %%
map <leader>n :split %%

" Map ,j to format json
map <Leader>j :%!python -m json.tool<cr>
let g:rspec_command_launcher = "iterm"
let g:rspec_command_executable = "run_test {spec}"

" Ack in Vim
cnoreabbrev Ack Ack!
nnoremap <Leader>a :Ack!<Space>

" .js files are handled as .jsx
let g:jsx_ext_required = 0

" Rspec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<cr>
map <Leader>T :call RunNearestSpec()<cr>
map <Leader>l :call RunLastSpec()<cr>
map <Leader>r :call RunAllSpecs()<cr>

" Custom functions
map <leader>p :call PromoteToLet()<cr>

" Align = signs
nmap <Leader>a= :Tabularize /=<cr>
vmap <Leader>a= :Tabularize /=<cr>gv
" Align after colons
nmap <Leader>a: :Tabularize /:\zs/l1<cr>
vmap <Leader>a: :Tabularize /:\zs/l1<cr>gv
" Align hashrockets
nmap <Leader>a> :Tabularize /=><cr>
vmap <Leader>a> :Tabularize /=><cr>gv
" Align commas
nmap <Leader>a, :Tabularize /,\zs/l1<cr>
vmap <Leader>a, :Tabularize /,\zs/l1<cr>gv
" Align words and fix indentation
nmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>=ip
vmap <Leader>aw :Tabularize /\s\+\zs/l1<cr>gv=gv
" Align comments
nmap <Leader>ac :Tabularize /#<cr>
" Align blocks
nmap <Leader>a{ :Tabularize /{<cr>
vmap <Leader>a{ :Tabularize /{<cr>gv
vmap <Leader>a{ :Tabularize /{<cr>gv

" Fugitive (Git)
map <Leader><Leader>c :Gcommit<cr>
map <Leader><Leader>b :Gblame<cr>
map <Leader><Leader>s :Gstatus<cr>
map <Leader><Leader>w :Gwrite<cr>
map <Leader><Leader>p :Git push<cr>
map <Leader><Leader>f :Git fetch<cr>
map <Leader><Leader>u :Git up<cr>

" Open notes file
map <Leader>1 :split ~/Dropbox/Shared/notes1.md<cr>
map <Leader>2 :split ~/Dropbox/Shared/notes2.md<cr>
map <Leader>3 :split ~/Dropbox/Shared/notes3.md<cr>
map <Leader>4 :split ~/Dropbox/Shared/notes4.md<cr>
map <Leader>5 :split ~/Dropbox/Shared/notes5.md<cr>

" Moving lines up and down in normal, insert and visual mode
" Alt+j to move down, Alt+k to move up
nnoremap ∆ :m .+1<CR>==
nnoremap ˚ :m .-2<CR>==
inoremap ∆ <Esc>:m .+1<CR>==gi
inoremap ˚ <Esc>:m .-2<CR>==gi
vnoremap ∆ :m '>+1<CR>gv=gv
vnoremap ˚ :m '<-2<CR>gv=gv

" Configuration for CtrlP file finder
let g:ctrlp_working_path_mode = 'd'
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|tmp|es|lib)|(\.(swp|ico|git|svn|DS_Store))$'
" let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git|tmp|es6|lib'


" Configuration for Coc Auto Completion
let g:coc_global_extensions = [ 'coc-html', 'coc-css', 'coc-tsserver', 'coc-json' ]

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <leader>gd <Plug>(coc-definition)
nmap <leader>gy <Plug>(coc-type-definition)
nmap <leader>gi <Plug>(coc-implementation)
nmap <leader>gr <Plug>(coc-references)

" ==========================
" FUNCTIONS
" ==========================

" Smart tab autocomplete behavior
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction

" Convert local variable to RSpec let block
function! PromoteToLet()
  :normal! dd
  :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction

" Aligns tables in cucumber
function! s:AlignCucumberTables()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction
